#!/usr/bin/env bash

#                  _                                __ _             _
#  _ __ ___   __ _| | _____         ___ ___  _ __  / _(_) __ _   ___| |__
# | '_ ` _ \ / _` | |/ / _ \ _____ / __/ _ \| '_ \| |_| |/ _` | / __| '_ \
# | | | | | | (_| |   < (_) |_____| (_| (_) | | | |  _| | (_| |_\__ \ | | |
# |_| |_| |_|\__,_|_|\_\___/       \___\___/|_| |_|_| |_|\__, (_)___/_| |_|
#                                                        |___/

update_mako_config() {
  # Define the paths
  cache_file="${HOME}/.cache/wal/colors.json"
  output_dir="${HOME}/.config/mako"
  output_file="${output_dir}/config"

  if [ ! -f "$cache_file" ]; then
    echo "No $cache_file!"
    exit -1
  fi

  if [ ! -d "$output_dir" ]; then
    mkdir -p $output_dir
  fi

  # Extract colors from the pywal cache file
  background=$(jq -r '.special.background' "$cache_file")
  foreground=$(jq -r '.special.foreground' "$cache_file")
  color0=$(jq -r '.colors.color0' "$cache_file")
  color1=$(jq -r '.colors.color1' "$cache_file")
  color4=$(jq -r '.colors.color4' "$cache_file")
  color8=$(jq -r '.colors.color8' "$cache_file")
  color9=$(jq -r '.colors.color9' "$cache_file")

  # Create a new config file for mako
  cat <<EOF > "$output_file"
# Mako configuration file.
# Generated by walset.sh with jq.

# General settings
layer=overlay
background-color=#2e3440
border-size=2
max-icon-size=120
default-timeout=5000
ignore-timeout=1
font=FiraCode Nerd Font 12
border-radius=10
padding=10
icon-border-radius=5
anchor=top-center

# Default colors
background-color=$background
text-color=$foreground
border-color=$color4

# Urgency levels
[urgency=low]
background-color=$color8
text-color=$foreground
border-color=$color0

[urgency=normal]
background-color=$color1
text-color=$foreground
border-color=$color0

[urgency=critical]
background-color=$color9
text-color=$foreground
border-color=$color0
EOF

  # Restart mako to reflect the above changes
  makoctl reload
}

